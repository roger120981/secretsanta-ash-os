defmodule :"Elixir.SecretSanta.Repo.Migrations.Wip0.1.02024-11-04" do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:user_profiles, primary_key: false) do
      add(:id, :text, null: false, primary_key: true)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:deleted_at, :utc_datetime_usec)
      add(:name, :text, null: false)
      add(:account_id, :text, null: false)
    end

    create table(:user_groups, primary_key: false) do
      add(
        :user_id,
        references(:user_profiles,
          column: :id,
          name: "user_group_user_profile_fkey",
          type: :text,
          prefix: "public",
          on_delete: :delete_all
        ),
        primary_key: true,
        null: false
      )

      add(:group_id, :text, null: false, primary_key: true)
      add(:hint_for_santa, :text)
      add(:invited_at, :utc_datetime_usec, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:accepted_at, :utc_datetime_usec)
      add(:rejected_at, :utc_datetime_usec)
      add(:hint_requested_at, :utc_datetime_usec)
    end

    create table(:groups, primary_key: false) do
      add(:id, :text, null: false, primary_key: true)
    end

    alter table(:user_groups) do
      modify(
        :group_id,
        references(:groups,
          column: :id,
          name: "user_group_group_fkey",
          type: :text,
          prefix: "public",
          on_delete: :delete_all
        )
      )
    end

    alter table(:groups) do
      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:deleted_at, :utc_datetime_usec)
      add(:name, :text, null: false)
      add(:desc, :text)
      add(:budget, :map)
      add(:budget_desc, :text)
      add(:starts_on, :date)
      add(:pairs, {:array, :map}, null: false, default: [])

      add(
        :lead_santa_id,
        references(:user_profiles,
          column: :id,
          name: "group_to_lead_santa_fkey",
          type: :text,
          prefix: "public",
          on_delete: :delete_all,
          on_update: :update_all
        ),
        null: false
      )
    end

    create table(:accounts, primary_key: false) do
      add(:id, :text, null: false, primary_key: true)
    end

    alter table(:user_profiles) do
      modify(
        :account_id,
        references(:accounts,
          column: :id,
          name: "user_profile_account_fkey",
          type: :text,
          prefix: "public",
          on_delete: :delete_all,
          on_update: :update_all
        )
      )
    end

    alter table(:accounts) do
      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:deleted_at, :utc_datetime_usec)
      add(:email, :citext, null: false)
    end

    create(
      unique_index(:accounts, [:email],
        where: "(deleted_at IS NULL)",
        name: "accounts_email_index"
      )
    )

    create table(:account_tokens, primary_key: false) do
      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:extra_data, :map)
      add(:purpose, :text, null: false)
      add(:expires_at, :utc_datetime, null: false)
      add(:subject, :text, null: false)
      add(:jti, :text, null: false, primary_key: true)
    end
  end

  def down do
    drop(table(:account_tokens))

    drop_if_exists(unique_index(:accounts, [:email], name: "accounts_email_index"))

    alter table(:accounts) do
      remove(:email)
      remove(:deleted_at)
      remove(:updated_at)
      remove(:inserted_at)
    end

    drop(constraint(:user_profiles, "user_profile_account_fkey"))

    alter table(:user_profiles) do
      modify(:account_id, :text)
    end

    drop(table(:accounts))

    drop(constraint(:groups, "group_to_lead_santa_fkey"))

    alter table(:groups) do
      remove(:lead_santa_id)
      remove(:pairs)
      remove(:starts_on)
      remove(:budget_desc)
      remove(:budget)
      remove(:desc)
      remove(:name)
      remove(:deleted_at)
      remove(:updated_at)
      remove(:inserted_at)
    end

    drop(constraint(:user_groups, "user_group_group_fkey"))

    alter table(:user_groups) do
      modify(:group_id, :text)
    end

    drop(table(:groups))

    drop(constraint(:user_groups, "user_group_user_profile_fkey"))

    drop(table(:user_groups))

    drop(table(:user_profiles))
  end
end
